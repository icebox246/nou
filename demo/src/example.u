// make run visible outside the app
export run;

// for printing values to output you can use
//     log := fn x: [u8];           -- prints strings
//     log_int := fn x: i32;        -- prints numbers
//     log_bool := fn b: bool;      -- prints booleans
//     log_nl := fn;                -- prints new line
// 
// to ask user for input use
//     ask := fn buf: [u8] -> [u8]; -- reads a string from user into buf
//     ask_int := fn -> i32;        -- reads a number from user
//
// to allocate memory use
//     mem_alloc_slice := fn size: u32 -> [u8] -- returns allocated [u8]
//     mem_free_slice := fn slice: [u8]        -- frees provided [u8]

// this is the entry point of the app
run := fn {
  log("=====================\n");
  log("Hello, U!\n");

  // add 1 and 2, and store the result in res
  res := i32 add(1, 2);
  log("res = ")
  log_int(res);
  log_nl();

  // checks whether passed value is even
  is_even := fn n: i32 -> bool { return n % 2 == 0; };
  log("is_even(res) = ");
  log_bool(is_even(res));
  log_nl();

  log("10th fibonacci number is ");
  log_int(fib(10));
  log_nl();

  // gives nth fibonacci number
  fib := fn n: i32 -> i32 {
    if (n == 0)
      return 0;
    if (n == 1)
      return 1;
    return fib(n - 1) + fib(n - 2);
  };

  log("=====================\n");

  // uncomment lines below to see interactive example
  //greet();
  //interactive_doubling();
};

add := fn a: i32, b: i32 -> i32 {
  return a + b;
};

greet := fn {
  buf := [u8] mem_alloc_slice(128u32);

  name := [u8] ask(buf);
  log("Nice to meet you ");
  log(name);
  log("!\n");

  mem_free_slice(buf);
};

interactive_doubling := fn {
  num := i32;
  num = ask_int();
  log("Your result is: ");
  log_int(2 * num);
  log_nl();
};

////////////// logging to output

// logs string value to output
extern log := fn x: [u8];

// logs int value to output
log_int := fn n: i32 {
  // allocate a buffer for 128 chars
  buf := [u8] mem_alloc_slice(128u32);

  _digit := fn x: i32, prev: [u8] -> [u8] {
    if (x == 0) return prev;

    next := [u8];
    next.ptr = prev.ptr - 1u32;
    next.len = prev.len + 1u32;

    next!0 = (x % 10) as u8 + 48u8;

    return _digit(x / 10, next);
  };

  out := [u8];
  out.len = 0u32;
  out.ptr = buf.ptr + buf.len;

  out = _digit(n, out);

  log(out);

  mem_free_slice(buf);
};

// logs boolean value to output
log_bool := fn b: bool {
  if (b) 
    log("true");
  else
    log("false");
};

log_nl := fn {
  log("\n");
};

////////////// user input prompting

extern ask := fn buf: [u8] -> [u8];

// asks user for int value
ask_int := fn -> i32 {
    buf := [u8] mem_alloc_slice(128u32 + 4u32);

    inp := [u8] ask(buf);

    _digit := fn _inp: [u8], i: u32, _out: i32 -> i32 {
        if (i == _inp.len) return _out;
        return _digit(_inp, i+1u32, _out * 10 + (_inp!i as i32 - 48));
    };

    out := i32 _digit(inp, 0u32, 0);

    mem_free_slice(buf);

    return out;
};

////////////// memory allocation

// allocate [u8] of provided size
mem_alloc_slice := fn size: u32 -> [u8] {
  page_count := u32 (size + 511u32) / 512u32;
  page_allocation_table := [u32] _mem_get_page_allocation_table();
  _find := fn table: [u32], i: u32, c: u32 -> u32 {
    _check := fn _table: [u32], j: u32, end: u32 -> bool {
      if (j == end) return true;
      if (_table!j == 0u32) return _check(_table, j + 1u32, end);
      return false;
    };
    if (_check(table, i, i + c)) {
      return i;
    } else {
      return _find(table, i + table!i, c);
    }
  };
  first_available := u32 _find(page_allocation_table, 1u32, page_count);
  page_allocation_table!first_available = page_count;
  slice := [u8] _mem_get_memory_pages(first_available, page_count);
  slice.len = size;
  return slice;
};

// free allocated [u8]
mem_free_slice := fn slice: [u8] {
  page_index := u32 slice.ptr / 512u32;
  page_allocation_table := [u32] _mem_get_page_allocation_table();
  page_allocation_table!page_index = 0u32;
};

_mem_get_allocable_region := fn -> [u8] {
  region := [u8];
  region.len = 64u32 * 1024u32;
  region.ptr = 64u32 * 1024u32;
  return region;
};

// page 0 is reserved  for page_allocation_table
_mem_get_page_allocation_table := fn -> [u32] {
  heap_region := [u8] _mem_get_allocable_region();
  page_allocation_table := [u32];
  page_allocation_table.len = 128u32; // max number of pages
  page_allocation_table.ptr = heap_region.ptr; // starts at heap region start
  return page_allocation_table;
};

_mem_get_memory_pages := fn start: u32, count: u32 -> [u8] {
  heap_region := [u8] _mem_get_allocable_region();
  pages := [u8];
  pages.ptr = heap_region.ptr + 512u32 * start;
  pages.len = 512u32 * count;
  return pages;
};
