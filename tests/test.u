// exports 
export add;
export add2;
export echo;
export big;
export nop;
export variables;
export expressions;
export expressions2;
export expressions3;
export functions;
export external_functions;
export boolean_values;
export boolean_values2;
export if_statement;
export if_else_statement;
export u8_values;
export u32_values;
export u8_slices;
export slice_indexing;

// adds two numbers 
add := fn a: i32, b: i32 -> i32 {
    return a + b;
};

// adds 2 to a number
add2 := fn x: i32 -> i32 {
    return x + 2;
};

// echoes passed number
echo := fn x: i32 -> i32 {
    return x;
};

// returns a big number
big := fn -> i32 {
    return 123456789;
};

// does nothing
nop := fn {};

// uses variables
variables := fn -> i32 {
    b := i32 21;
    a := i32 b + b; 
    return a;
};

// tests operator associativity
expressions := fn -> i32 {
    a := i32 43 - 3 + 2; 
    return a;
};

// tests parentheses
expressions2 := fn -> i32 {
    a := i32 2 * (20 + 1); 
    return a;
};

// test division and remainder
expressions3 := fn -> i32 {
    a := i32 (10 % 20) * 8 / 2 + 5 % 3; 
    return a;
};

// tests function calls
functions := fn -> i32 {
    a := i32 add(20, 21);
    f := fn {
        t := i32;
        t = 42;
    };
    f();
    return a;
};

extern log_int := fn n: i32 -> i32;

// tests external function calls
external_functions := fn -> i32 {
    return log_int(42);
};

// tests calculating basic boolean value
boolean_values := fn n: i32 -> bool {
    is_even := bool;
    is_even = n % 2 == 0;
    return is_even;
};

// tests boolean constants and boolean operators
boolean_values2 := fn n: i32 -> bool {
    is_divisible_by_6 := bool true or false;
    is_divisible_by_6 = (6 % 3 == 0 and 6 % 2 == 0);
    return is_divisible_by_6;
};

// tests basic usage of if statements
if_statement := fn n: i32 -> i32 {
    if (n % 2 == 0)
        return 2;
    return 1;
};

// tests basic usage of if..else.. statement
if_else_statement := fn n: i32 -> bool {
    foo := i32;
    if (n % 2 == 1)
        foo = 2;
    else
        foo = 1;

    return foo * n % 2 == 0;
};

// tests for u8 type
u8_values := fn -> u8 {
    a := u8 43u8;
    o := u8 255u8;
    return a + o;
};

// tests for u32 type
u32_values := fn -> u32 {
    a := u32 42u32;
    return a;
};

// test for u8 slices
u8_slices := fn -> [u8] {
    foo := [u8] "Not hello...";
    str := [u8] "Hello, World!";
    return str;
};

// test for slice indexing
slice_indexing := fn -> u8 {
    slice := [u8] "ABC";
    if (slice!1 == 66u8) {
        slice!1 = 42u8;
    }
    return slice!1;
};
